/* eslint-disable react-hooks/rules-of-hooks */
import Head from "next/head";
import Layout from "@/components/ui/Layout";
import { apiClient } from "../../api/api";
import {
  useState,
  Fragment,
  FormEvent,
  JSXElementConstructor,
  ReactElement,
  ReactFragment,
  ReactPortal,
  Key,
} from "react";
import Input from "@/components/ui/Input";
import { Dialog, Transition } from "@headlessui/react";
import { useRouter } from "next/router";
import Table from "@/components/ui/Table";

type PatientProps = {
  name: string;
  birthday: string;
  height: string;
  weight: string;
};

type NotesProps = {
  note: string;
  date: string;
};

type AppointmentProps = {
  patientId: number;
  startDate: string;
  endDate: string;
  id: number;
};

interface AppointmentDetails {
  patient: PatientProps;
  notes: NotesProps[];
  data: AppointmentProps;
}

export default function Appointment(data: {
  data: {
    patient: PatientProps;
    notes: NotesProps[];
  };
}) {
  const api = apiClient();

  const router = useRouter();

  const [note, setNote] = useState("");

  let [isOpen, setIsOpen] = useState(false);

  function closeModal() {
    setIsOpen(false);
  }

  function openModal(event: FormEvent) {
    setIsOpen(true);
  }

  async function submit() {
    try {
      await api.post("/notes", {
        appointmentId: data.data.id,
        notes: note,
        date: `${new Date().toISOString().slice(0, 10)}T00:00:00.000Z`,
      });

      setIsOpen(false);

      window.location.reload();
    } catch {}
  }

  function formatDate(date: string) {
    return new Date(date).toLocaleDateString();
  }

  return (
    <>
      <Head>
        <title>Agendamentos</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout title={`Paciente ${data.data.patient.name}`} subtitle="">
        <div className="w-[40%] border-t border-gray-200">
          <dl>
            <div className="flex justify-between bg-gray-50 px-4 py-5 sm:grid-cols-3 sm:gap-4 sm:px-6">
              <dt className="text-sm font-medium text-gray-500">
                Data de Nascimento
              </dt>
              <dd className="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
                {formatDate(data.data.patient.birthday)}
              </dd>
            </div>
            <div className="flex justify-between bg-white   px-4 py-5 sm:grid-cols-3 sm:gap-4 sm:px-6">
              <dt className="text-sm font-medium text-gray-500">Peso</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
                {data.data.patient.weight} kg
              </dd>
            </div>
            <div className="bg-gray-50  flex justify-between px-4 py-5 sm:grid-cols-3 sm:gap-4 sm:px-6">
              <dt className="text-sm font-medium text-gray-500">Altura</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
                {data.data.patient.height}
              </dd>
            </div>
          </dl>
        </div>
        <div className="flex justify-end">
          <button
            type="button"
            onClick={openModal}
            className="flex-end mt-5 text-white bg-pink-600 hover:bg-pink-800 focus:ring-4 focus:outline-none focus:ring-pink-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center mr-2"
          >
            Nova Anotação
          </button>
        </div>
        <div>
          <Transition appear show={isOpen} as={Fragment}>
            <Dialog as="div" className="relative z-10" onClose={closeModal}>
              <Transition.Child
                as={Fragment}
                enter="ease-out duration-300"
                enterFrom="opacity-0"
                enterTo="opacity-100"
                leave="ease-in duration-200"
                leaveFrom="opacity-100"
                leaveTo="opacity-0"
              >
                <div className="fixed inset-0 bg-black bg-opacity-25" />
              </Transition.Child>

              <div className="fixed inset-0 overflow-y-auto">
                <div className="flex min-h-full items-center justify-center p-4 text-center">
                  <Transition.Child
                    as={Fragment}
                    enter="ease-out duration-300"
                    enterFrom="opacity-0 scale-95"
                    enterTo="opacity-100 scale-100"
                    leave="ease-in duration-200"
                    leaveFrom="opacity-100 scale-100"
                    leaveTo="opacity-0 scale-95"
                  >
                    <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                      <Dialog.Title
                        as="h5"
                        className="text-lg font-medium leading-6 text-gray-900"
                      >
                        Nova Anotação
                      </Dialog.Title>
                      <div className="mt-6">
                        <Input
                          type="text"
                          label="Anotação"
                          placeholder="1"
                          value={note}
                          valueChange={setNote}
                          required
                        />
                      </div>
                      <div className="mt-6">
                        <button
                          type="button"
                          className="rounded-md border border-transparent bg-pink-100 px-4 py-2 text-sm font-medium text-pink-600 hover:bg-pink-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-pink-500 focus-visible:ring-offset-2"
                          onClick={submit}
                        >
                          Avançar
                        </button>
                      </div>
                    </Dialog.Panel>
                  </Transition.Child>
                </div>
              </div>
            </Dialog>
          </Transition>
        </div>
        <div className="mt-10">
          <Table
            props={
              <tr>
                <th scope="col" className="px-6 py-3">
                  Data da Consulta
                </th>
                <th scope="col" className="px-6 py-3">
                  Atendimento
                </th>
              </tr>
            }
            data={data.data.notes.map(
              (note: any, index: Key | null | undefined) => (
                <tr className="bg-white border-b" key={index}>
                  <td
                    scope="row"
                    className="px-6 py-4 font-medium text-gray-900"
                  >
                    {formatDate(note.date)}
                  </td>
                  <td
                    scope="row"
                    className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap "
                  >
                    {note.note}
                  </td>
                </tr>
              )
            )}
          />
        </div>
      </Layout>
    </>
  );
}

export const getServerSideProps = async ({ params }) => {
  const api = apiClient();

  const response = await api.get(`/appointments/${params.id}`);

  return {
    props: {
      data: response,
    },
  };
};
