import Head from "next/head";
import Layout from "@/components/ui/Layout";
import Table from "@/components/ui/Table";
import { apiClient } from "../api/api";
import { useState, Fragment, FormEvent } from "react";
import Input from "@/components/ui/Input";
import { Dialog, Transition } from "@headlessui/react";

type Appointment = {
  patientId: number;
  startDate: string;
  endDate: string;
  id: number;
  createdAt: string;
  updatedAt: string;
};

interface AppointmentsProps {
  appointments: Appointment[];
}

export default function Appointments({ appointments }: AppointmentsProps) {
  const api = apiClient();

  const [list, setAppointments] = useState(appointments || []);

  const [patientId, setPatientId] = useState("");
  const [startDate, setStartDate] = useState("");

  let [isOpen, setIsOpen] = useState(false);
  function closeModal() {
    setIsOpen(false);
  }

  function openModal(event: FormEvent) {
    setIsOpen(true);
  }

  function formatDate(date: string) {
    return new Date(date).toLocaleDateString();
  }

  async function submit() {
    try {
      const data = {
        patientId,
        startDate: `${startDate}T00:00:00.000Z`,
      };

      await api.post("/appointments", {
        ...data,
      });

      setIsOpen(false);

      window.location.reload();
    } catch {}
  }

  return (
    <>
      <Head>
        <title>Agendamentos</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout title="Agendamentos" subtitle="Agendamentos da Afya">
        <div className="flex justify-end">
          <button
            type="button"
            onClick={openModal}
            className="flex-end mb-5 text-white bg-pink-600 hover:bg-pink-800 focus:ring-4 focus:outline-none focus:ring-pink-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center mr-2"
          >
            Nova Consulta
          </button>

          <Transition appear show={isOpen} as={Fragment}>
            <Dialog as="div" className="relative z-10" onClose={closeModal}>
              <Transition.Child
                as={Fragment}
                enter="ease-out duration-300"
                enterFrom="opacity-0"
                enterTo="opacity-100"
                leave="ease-in duration-200"
                leaveFrom="opacity-100"
                leaveTo="opacity-0"
              >
                <div className="fixed inset-0 bg-black bg-opacity-25" />
              </Transition.Child>

              <div className="fixed inset-0 overflow-y-auto">
                <div className="flex min-h-full items-center justify-center p-4 text-center">
                  <Transition.Child
                    as={Fragment}
                    enter="ease-out duration-300"
                    enterFrom="opacity-0 scale-95"
                    enterTo="opacity-100 scale-100"
                    leave="ease-in duration-200"
                    leaveFrom="opacity-100 scale-100"
                    leaveTo="opacity-0 scale-95"
                  >
                    <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                      <Dialog.Title
                        as="h5"
                        className="text-lg font-medium leading-6 text-gray-900"
                      >
                        Nova Consulta
                      </Dialog.Title>
                      <div className="mt-6">
                        <Input
                          type="text"
                          label="Identificador do Paciente"
                          placeholder="1"
                          value={patientId}
                          valueChange={setPatientId}
                          required
                        />
                      </div>

                      <div className="mt-6">
                        <Input
                          type="text"
                          label="Data da Consulta"
                          placeholder="2023-03-15"
                          value={startDate}
                          valueChange={setStartDate}
                          required
                        />
                      </div>
                      <div className="mt-6">
                        <button
                          type="button"
                          className="rounded-md border border-transparent bg-pink-100 px-4 py-2 text-sm font-medium text-pink-600 hover:bg-pink-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-pink-500 focus-visible:ring-offset-2"
                          onClick={submit}
                        >
                          Avan√ßar
                        </button>
                      </div>
                    </Dialog.Panel>
                  </Transition.Child>
                </div>
              </div>
            </Dialog>
          </Transition>
        </div>
        <Table
          props={
            <tr>
              <th scope="col" className="px-6 py-3">
                Identificador do Paciente
              </th>
              <th scope="col" className="px-6 py-3">
                Data
              </th>
            </tr>
          }
          data={list.map((appointment, index) => (
            <tr className="bg-white border-b " key={index}>
              <td
                scope="row"
                className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap"
              >
                {appointment.patientId}
              </td>
              <td className="px-6 py-4">{formatDate(appointment.startDate)}</td>
              <td className="px-6 py-4 text-right">
                <a href={`/appointments/appointment/${appointment.id}`} className="font-medium text-pink-600">
                  Detalhes
                </a>
              </td>
            </tr>
          ))}
        />
      </Layout>
    </>
  );
}

export const getServerSideProps = async () => {
  const api = apiClient();

  const appointments = await api.get("appointments");

  return {
    props: {
      appointments,
    },
  };
};
